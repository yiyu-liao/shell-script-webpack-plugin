{"version":3,"sources":["_test/index.js"],"names":["webpack","require","test","resolve","join","ShellPlugin","outputPath","__dirname","remove","build","config","Promise","rejects","error","stats","hasErrors","toJson","errors","output","path","filename","createConfig","pluginScript","entry","plugins","truthy","beforeRun","then","testJson","testModule","after","always"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,KAAD,CAApB;;AACA,MAAM;AAAEE,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAoBH,OAAO,CAAC,MAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,KAAD,CAA3B;;AAEA,MAAMK,UAAU,GAAGH,OAAO,CAACI,SAAD,EAAY,SAAZ,CAA1B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaP,OAAO,CAAC,UAAD,CAA1B;;AAGA,SAASQ,KAAT,CAAeC,MAAf,EAAuB;AACnB,SAAO,IAAIC,OAAJ,CAAY,CAACR,OAAD,EAAUS,OAAV,KAAsB;AACrCZ,IAAAA,OAAO,CAACU,MAAD,EAAS,CAACG,KAAD,EAAQC,KAAR,KAAkB;AAC9B,UAAID,KAAK,IAAIC,KAAK,CAACC,SAAN,EAAb,EAAgC;AAC5BH,QAAAA,OAAO,CAACC,KAAK,IAAGC,KAAK,CAACE,MAAN,CAAa,aAAb,EAA4BC,MAArC,CAAP;AACA;AACH;;AACDd,MAAAA,OAAO,CAAE,GAAEO,MAAM,CAACQ,MAAP,CAAcC,IAAK,IAAGT,MAAM,CAACQ,MAAP,CAAcE,QAAS,EAAjD,CAAP;AACH,KANM,CAAP;AAQH,GATM,CAAP;AAUH;;AAED,SAASC,YAAT,CAAsBC,YAAtB,EAAoC;AAChC,SAAO;AACHC,IAAAA,KAAK,EAAEpB,OAAO,CAACI,SAAD,EAAY,YAAZ,CADX;AAEHW,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAEb,UADF;AAEJc,MAAAA,QAAQ,EAAE;AAFN,KAFL;AAMHI,IAAAA,OAAO,EAAE,CAAC,IAAInB,WAAJ,CAAgBiB,YAAhB,CAAD;AANN,GAAP;AAQH;;AAEDpB,IAAI,CAAC,2BAAD,EAA8B,CAAC;AAAEuB,EAAAA;AAAF,CAAD,KAAgB;AAC9C,MAAIf,MAAM,GAAGW,YAAY,CAAC;AAAEK,IAAAA,SAAS,EAAE,CAAC,oBAAD;AAAb,GAAD,CAAzB;AACA,SAAOjB,KAAK,CAACC,MAAD,CAAL,CAAciB,IAAd,CAAmB,MAAM;AAC5B,UAAMC,QAAQ,GAAG3B,OAAO,CAAC,oBAAD,CAAxB;;AACA,UAAM4B,UAAU,GAAG5B,OAAO,CAACG,IAAI,CAACE,UAAD,EAAa,QAAb,CAAL,CAA1B;;AACAmB,IAAAA,MAAM,CAACG,QAAQ,CAAC1B,IAAV,CAAN;AACAuB,IAAAA,MAAM,CAACI,UAAD,CAAN;AACH,GALM,CAAP;AAMH,CARG,CAAJ;AAUA3B,IAAI,CAAC4B,KAAL,CAAWC,MAAX,CAAkB,mBAAlB,EAAuC,MAAMvB,MAAM,CAACF,UAAD,CAAnD","sourceRoot":"/Users/myself/shell-script-webpack-plugin","sourcesContent":["const webpack = require('webpack');\nconst test = require('ava');\nconst { resolve, join } = require('path');\nconst ShellPlugin = require('../')\n\nconst outputPath = resolve(__dirname, '../.tmp')\n\nconst { remove } = require('fs-extra')\n\n\nfunction build(config) {\n    return new Promise((resolve, rejects) => {\n        webpack(config, (error, stats) => {\n            if (error || stats.hasErrors()) {\n                rejects(error ||stats.toJson('errors-only').errors);\n                return;\n            }\n            resolve(`${config.output.path}/${config.output.filename}`);\n        })\n\n    })\n}\n\nfunction createConfig(pluginScript) {\n    return {\n        entry: resolve(__dirname, './entry.js'),\n        output: {\n            path: outputPath,\n            filename: 'tem.js'\n        },\n        plugins: [new ShellPlugin(pluginScript)]\n    }\n}\n\ntest('it should new a json file', ({ truthy }) => {\n    let config = createConfig({ beforeRun: ['sh ./_test/test.sh'] });\n    return build(config).then(() => {\n        const testJson = require('../.temp/test.json');\n        const testModule = require(join(outputPath, 'tmp.js'));\n        truthy(testJson.test)\n        truthy(testModule)\n    })\n})\n\ntest.after.always('cleanup dist file', () => remove(outputPath))"]}